/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Test extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Test\",\"namespace\":\"com.example.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"product\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private int id;
   private java.lang.String product;
   private int quantity;
   private float price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Test() {}

  /**
   * All-args constructor.
   */
  public Test(java.lang.Integer id, java.lang.String product, java.lang.Integer quantity, java.lang.Float price) {
    this.id = id;
    this.product = product;
    this.quantity = quantity;
    this.price = price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return product;
    case 2: return quantity;
    case 3: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: product = (java.lang.String)value$; break;
    case 2: quantity = (java.lang.Integer)value$; break;
    case 3: price = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'product' field.
   */
  public java.lang.String getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.String value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Integer value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'price' field.
   */
  public java.lang.Float getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Float value) {
    this.price = value;
  }

  /** Creates a new Test RecordBuilder */
  public static com.example.avro.Test.Builder newBuilder() {
    return new com.example.avro.Test.Builder();
  }
  
  /** Creates a new Test RecordBuilder by copying an existing Builder */
  public static com.example.avro.Test.Builder newBuilder(com.example.avro.Test.Builder other) {
    return new com.example.avro.Test.Builder(other);
  }
  
  /** Creates a new Test RecordBuilder by copying an existing Test instance */
  public static com.example.avro.Test.Builder newBuilder(com.example.avro.Test other) {
    return new com.example.avro.Test.Builder(other);
  }
  
  /**
   * RecordBuilder for Test instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Test>
    implements org.apache.avro.data.RecordBuilder<Test> {

    private int id;
    private java.lang.String product;
    private int quantity;
    private float price;

    /** Creates a new Builder */
    private Builder() {
      super(com.example.avro.Test.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.example.avro.Test.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.product)) {
        this.product = data().deepCopy(fields()[1].schema(), other.product);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Test instance */
    private Builder(com.example.avro.Test other) {
            super(com.example.avro.Test.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.product)) {
        this.product = data().deepCopy(fields()[1].schema(), other.product);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.example.avro.Test.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.example.avro.Test.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'product' field */
    public java.lang.String getProduct() {
      return product;
    }
    
    /** Sets the value of the 'product' field */
    public com.example.avro.Test.Builder setProduct(java.lang.String value) {
      validate(fields()[1], value);
      this.product = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'product' field has been set */
    public boolean hasProduct() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'product' field */
    public com.example.avro.Test.Builder clearProduct() {
      product = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'quantity' field */
    public java.lang.Integer getQuantity() {
      return quantity;
    }
    
    /** Sets the value of the 'quantity' field */
    public com.example.avro.Test.Builder setQuantity(int value) {
      validate(fields()[2], value);
      this.quantity = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'quantity' field has been set */
    public boolean hasQuantity() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'quantity' field */
    public com.example.avro.Test.Builder clearQuantity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'price' field */
    public java.lang.Float getPrice() {
      return price;
    }
    
    /** Sets the value of the 'price' field */
    public com.example.avro.Test.Builder setPrice(float value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'price' field has been set */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'price' field */
    public com.example.avro.Test.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Test build() {
      try {
        Test record = new Test();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.product = fieldSetFlags()[1] ? this.product : (java.lang.String) defaultValue(fields()[1]);
        record.quantity = fieldSetFlags()[2] ? this.quantity : (java.lang.Integer) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
